### StrandPhaseR pipeline ###
 
BAM, = glob_wildcards("bam/{bam}.bam") #already part of of main pipeline 
ref = '/local/data/david/test_pipeline/hg19.fa' #this should be included in JSON file 

rule all:
    input:	
        "StrandPhaseR_analysis/Phased/phased_haps.txt"

rule indexBams:
    input:
        "bam/{bam}.bam"
    output:
        "bam/{bam}.bam.bai"
    shell:
        "samtools index {input}"


rule mergeBams:
    input:
        expand("bam/{bam}.bam", bam=BAM)
    output:
        "bam/mergedBam/merged.bam"	
    shell:
        "samtools merge {output} {input}" 

rule indexMergedBam:
    input:
	"bam/mergedBam/merged.bam"
    output:
	"bam/mergedBam/merged.bam.bai"
    shell:
        "samtools index {input}"		

rule CallSNVs_bcftools:
    input:
        fa={ref},
        #bam=expand("bam/{bam}.bam", bam=BAM), #perhaps later we can decide to skip merging and submit all BAMs for SNV calling 
        #bai=expand("bam/{bam}.bam.bai", bam=BAM)
	bam="bam/mergedBam/merged.bam",	
	bai="bam/mergedBam/merged.bam.bai"	

    output:
        "bam/SNVcalls/input.vcf"
	
    shell:		
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"

rule install_StrandPhaseR:
    output:
        'R-packages/StrandPhaseR/R/StrandPhaseR'
    log:
        'strandphaser-install.log'
    shell:
        'Rscript install_StrandPhaseR.R > {log} 2>&1'


rule run_SSphasing_pipeline:
    input: 
        mergedbam='bam/mergedBam/merged.bam',
        wcregions='D2Rfb.strand_WCregions.txt',
 	snppositions='bam/SNVcalls/input.vcf',
	configfile="StrandPhaseR.config",
        strandphaser='R-packages/StrandPhaseR/R/StrandPhaseR',
        bamfolder='bam'
    output:
        'StrandPhaseR_analysis/Phased/phased_haps.txt' 
    log:
        'StrandPhaseR_analysis/Phased/phased_haps.txt.log'
    run: 
        cwd = os.getcwd()
        shell('Rscript StrandPhaseR_pipeline.R {input.bamfolder} StrandPhaseR_analysis {input.configfile} {input.wcregions} {input.snppositions} {cwd}/R-packages/ > {log} 2>&1')

